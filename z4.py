a1 = []

m1 = "1. Отсортировать массив по невозрастанию методом включения с выбором включаемого элемента справа налево"
m2 = "2. Отсортировать массив по невозрастанию методом извлечения максимального элемента, поиск максимального элемента проводить слева направо"
m3 = "3. Отсортировать массив по неубыванию методом обменов рядом стоящих элементов с фиксированным числом просмотров, направленных справа налево"
m4 = "4. Отсортировать массив по невозрастанию методом обменов рядом стоящих элементов с минимально необходимым (переменным) числом просмотров, направленных слева направо"
m5 = "5. Отсортировать массив по неубыванию методом обменов рядом стоящих элементов за один просмотр (с возвратами) справа налево"
m6 = "6. Получить упорядоченный по неубыванию массив методом слияния двух упорядоченных по невозрастанию массивов"
m7 = "7. Отсортировать массив по невозрастанию методом распределения по массиву ключей, упорядоченному по неубыванию"

# ввод данных
def main():
    # вводим массив
    print("Вводим массив")
    print("Введите количество элементов в массиве:")
    count = int(input())
    print("Теперь введите элементы массива:")
    for f in range(1, count + 1):
        l = int(input())
        a1.append(l)
    # выводим массивы
    print("Были введены седующие элементы массива: ")
    print(a1)
    # вводим способ сортировки
    print("Выберите метод сортировки одномерного массива: ")
    print(m1, "\n", m2, "\n", m3, "\n", m4, "\n", m5, "\n", m6, "\n", m7)

    x = int(input())
    # задание требует использовать подпрограммы для каждого метода сортировки
    if (x == 1):
        one()
    elif (x == 2):
        two()
    elif (x == 3):
        three()
    elif (x == 4):
        four()
    elif (x == 5):
        five()
    elif (x == 6):
        six()
    elif (x == 7):
        seven()
    else:
        print("Выбор неверен")


# поменять местами элементы массива
def swapPositions(pos1, pos2):
    temp = a1[pos1]
    a1[pos1] = a1[pos2]
    a1[pos2] = temp
    return a1


# методы сортировки
# Отсортировать массив по невозрастанию методом включения с выбором включаемого элемента справа налево
def one():
    for f in range(len(a1) - 1, -1, -1):
        for u in range(len(a1) - 1, -1, -1):
            if a1[f] < a1[u]:
                swapPositions(f, u)
    # выводим массивы
    output()


# Отсортировать массив по невозрастанию методом извлечения максимального элемента, поиск максимального элемента проводить слева направо
def two():
    for f in range(0, len(a1), 1):
        temp = f
        for u in range(f + 1, len(a1), 1):
            if a1[temp] < a1[u]:
                temp = u
        swapPositions(f, temp)
    # выводим массивы
    output()


# Отсортировать массив по неубыванию методом обменов рядом стоящих элементов с фиксированным числом просмотров, направленных справа налево
def three():
    for u in range(len(a1) - 1, 0, -1):
        for f in range(len(a1) - 1, 0, -1):
            if a1[f - 1] > a1[f]:
                swapPositions(f - 1, f)
    # выводим массивы
    output()


# Отсортировать массив по невозрастанию методом обменов рядом стоящих элементов с минимально необходимым (переменным) числом просмотров, направленных слева направо
def four():
    # для выполнения первой интерации
    w = bool(True)
    for u in range(1, len(a1), 1):
        # если в предыдущей интерации действий не было, завершить
        if w == bool(False):
            return output()
        else:
            w = bool(False)
            for f in range(1, len(a1), 1):
                if a1[f - 1] < a1[f]:
                    swapPositions(f - 1, f)
                    w = bool(True)
    # выводим массивы
    output()


# Отсортировать массив по неубыванию методом обменов рядом стоящих элементов за один просмотр (с возвратами) справа налево
# TODO
def five():
    for u in range(len(a1) - 1, 0, -1):
        w = bool(True)
        for f in range(len(a1) - 1, 0, -1):
            if w == bool(False):
                return
            elif a1[f - 1] > a1[f]:
                swapPositions(f - 1, f)
                print("Произвел замену и возврат к началу")
                output()
                w = bool(False)
    # выводим массивы
    output()


def six():
    output()


def seven():
    output()


# вывод данных
def output():
    print("Результат: ")
    print(a1)


# программа начинается с main
main()
